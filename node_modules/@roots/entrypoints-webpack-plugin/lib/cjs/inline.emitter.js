"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineEmitter = void 0;
const helpful_decorators_1 = require("helpful-decorators");
const webpack_1 = require("webpack");
/**
 * Emits inline html for each entrypoint
 *
 * @param compilation - Webpack compilation instance
 * @param publicPath - public path for assets
 */
class InlineEmitter {
    /**
     * Class constructor
     *
     * @param compilation - webpack compilation
     * @param publicPath - asset publicPath
     *
     * @public
     */
    constructor(compilation, assets, publicPath) {
        this.compilation = compilation;
        this.assets = assets;
        this.publicPath = publicPath;
    }
    /**
     * Get compiled asset file contents
     *
     * @param file - asset file
     * @returns - asset file contents
     *
     * @public
     * @decorator `@bind`
     */
    getCompiledAsset(file) {
        const raw = this.compilation.assets[file.replace(this.publicPath, '')]?.source();
        return raw instanceof Buffer ? raw.toString() : raw;
    }
    /**
     * Reduce an entrypoint entry to inline markup
     *
     * @param emittedHtml - emitted html
     * @param entrypoint - entrypoint tuple [filetype, files]
     *
     * @public
     * @decorator `@bind`
     */
    inlineReducer(emittedHtml, [type, files]) {
        const reducer = type === 'js'
            ? this.scriptReducer
            : type === 'css'
                ? this.styleReducer
                : () => emittedHtml;
        return files.reduce(reducer, emittedHtml);
    }
    /**
     * Reduce an entrypoint css filename to inline markup
     *
     * @param emittedHtml - emitted html
     * @param file - filename
     *
     * @public
     * @decorator `@bind`
     */
    styleReducer(emittedHtml, file) {
        return `${emittedHtml}<link rel="stylesheet" href="${file}" />\n`;
    }
    /**
     * Reduce an entrypoint js filename to inline markup
     *
     * @param emittedHtml - emitted html
     * @param file - filename
     *
     * @public
     * @decorator `@bind`
     */
    scriptReducer(a, file) {
        if (file.includes('runtime')) {
            return `${a}\n<script>\n${this.getCompiledAsset(file)}\n</script>\n`;
        }
        return `${a}<script src="${file}" type="defer"></script>\n`;
    }
    /**
     * Reduce entrypoint assets to inline markup
     *
     * @param emittedHtml - emitted html
     * @param assets - Entrypoint records
     *
     * @public
     * @decorator `@bind`
     */
    emitHtmlTags() {
        Object.entries(this.assets).map(([name, asset]) => {
            Object.assign(this.compilation.assets, {
                [`${name}.html`]: new webpack_1.sources.RawSource(Object.entries(asset).reduce(this.inlineReducer, ``)),
            });
        });
    }
}
__decorate([
    helpful_decorators_1.bind
], InlineEmitter.prototype, "getCompiledAsset", null);
__decorate([
    helpful_decorators_1.bind
], InlineEmitter.prototype, "inlineReducer", null);
__decorate([
    helpful_decorators_1.bind
], InlineEmitter.prototype, "styleReducer", null);
__decorate([
    helpful_decorators_1.bind
], InlineEmitter.prototype, "scriptReducer", null);
__decorate([
    helpful_decorators_1.bind
], InlineEmitter.prototype, "emitHtmlTags", null);
exports.InlineEmitter = InlineEmitter;
